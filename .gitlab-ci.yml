stages:
  - docker-images
  - deploy-bdd
  - deploy

variables:
  ##Variables Globales connexion HARBOR
  REGISTRY_USER: $HARBGOR_REGISTRY_USER
  REGISTRY_PASSWORD: $HARBOR_REGISTRY_PASSWORD
  REGISTRY_URL: harbor.indus.aix.apsdigit.lan
  ##Variables Globales pour tag différentes images du projet
  DOCKER_IMAGE_SQL: harbor.indus.aix.apsdigit.lan/parcindus/mssqlparcindus:$CI_COMMIT_REF_NAME
  DOCKER_IMAGE_BUILD: harbor.indus.aix.apsdigit.lan/parcindus/dotnetbuildparcindus:$CI_COMMIT_REF_NAME
  DOCKER_IMAGE_APP: harbor.indus.aix.apsdigit.lan/parcindus/appparcindus:$CI_COMMIT_REF_NAME
  ##Variables Globales utilisé dans un ou plusieurs stage
  KEYCLOAK_PWD: $KC_PWD
  URI: "https://parking-$CI_COMMIT_REF_NAME.deploy.indus.aix.apsdigit.lan"
  BDD_HOST: $BDD_HOST
  BDD_PWD: $BDD_PWD
  CONNEXION_STRING="Server=$BDD_HOST;Database=parcIndus;User Id=parcadmin;Password=$BDD_PWD;TrustServerCertificate=true;"
  #Variables pour les run docker
  DOCKER_CONTAINER_NAME_SQL: mssqlparcindus_$CI_COMMIT_REF_NAME
  DOCKER_CONTAINER_NAME_BUILD: buildparcindus_$CI_COMMIT_REF_NAME
  DOCKER_CONTAINER_NAME_APP: parking_indus_$CI_COMMIT_REF_NAME
  DOCKER_VOLUME_BDD: bddparcindus$CI_COMMIT_REF_NAME
  DOCKER_VOLUME_APP: appparcindus$CI_COMMIT_REF_NAME
  DOCKER_NETWORK: parcindus_$CI_COMMIT_REF_NAME
  ##Variables pour reverse proxy Traefik du conteneur de l'APP
  TRAEFIK_ROUTER: parking_$CI_COMMIT_REF_NAME
  TRAEFIK_URL: parking-$CI_COMMIT_REF_NAME.deploy.indus.aix.apsdigit.lan
  TRAEFIK_LABEL_HOST: 'traefik.http.routers.$TRAEFIK_ROUTER.rule=Host(`$TRAEFIK_URL`)'
  ##Variables de run du conteneur de BDD
  BBD_ADMIN_PWD: $BDD_ADMIN_PWD
  EULA: $ACCEPT
  VERSION: $BDD_VERSION
  CI_DEBUG_TRACE: "true"

create-image-sql:
  stage: docker-images
  image: docker:20.10.16
  tags:
    - docker  
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD https://$REGISTRY_URL
  script:
    # Build Image mssqlcusto
    - "docker build -t $DOCKER_IMAGE_SQL -f DevOps/mssql/dockerfile ."
    # Push Image to Harbor
    - docker push $DOCKER_IMAGE_SQL

create-image-app:
  stage: docker-images
  image: docker:20.10.16
  tags:
    - docker
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD https://$REGISTRY_URL
  script:
# Build image runner !!
#Important variables BDD_HOST&BB_PWD nécessaires pour var env connexion_string du container pour execution de l'APP
    - "docker build -f DevOps/dockerfile -t $DOCKER_IMAGE_APP \
    --build-arg bdd_host=$BDD_HOST \
    --build-arg bdd_pwd=$BDD_PWD . " 
    # Push Image to docker
    - docker push $DOCKER_IMAGE_APP

#Séparation deploiement BDD car il faut attendre la fin du deploiement de la BDD/creation des DataBases avant de deployer Builder/Runner
deploy-BDD:
  stage: deploy-bdd
  image: docker:20.10.16
  tags:
    - docker
  # To know how this is working : https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-docker-executor-with-docker-socket-binding
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD https://$REGISTRY_URL
  script:
    # Stop and remove the container if it exists
    - docker stop $DOCKER_CONTAINER_NAME_SQL  || true
    - docker rm $DOCKER_CONTAINER_NAME_SQL  || true
    - docker stop $DOCKER_CONTAINER_NAME_BUILD  || true
    - docker stop $DOCKER_CONTAINER_NAME_APP  || true
    - docker network rm $DOCKER_NETWORK || true
    - docker volume rm $DOCKER_APP_VOLUME || true
    - docker rm $DOCKER_CONTAINER_NAME_APP || true
    - docker rm $DOCKER_CONTAINER_NAME_BUILD  || true
    # Create the volumeBDD&network
    - docker volume create $DOCKER_VOLUME_BDD || true
    - docker network create $DOCKER_NETWORK || true
    # First run the back, with little sleep after it to let it some time
    - "docker run -d --rm \
    --env ACCEPT_EULA=$EULA \
    --env SA_PASSWORD=$BDD_ADMIN_PWD \
    --env MSSQL_PID=$BDD_VERSION \
    --mount type=volume,src=$DOCKER_VOLUME_BDD,dst=/var/opt/mssql/data \
    --network=$DOCKER_NETWORK \
    --name $DOCKER_CONTAINER_NAME_SQL $DOCKER_IMAGE_SQL "
    - sleep 60

deploy-app:
  stage: deploy
  image: docker:20.10.16
  tags:
    - docker
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD https://$REGISTRY_URL
  script:
    # Run APP
    - "docker run -d --rm \
    -l traefik.http.services.$TRAEFIK_ROUTER.LoadBalancer.server.port=80 \
    -l $TRAEFIK_LABEL_HOST \
    -l traefik.http.routers.$TRAEFIK_ROUTER.entrypoints=http,https \
    -l traefik.http.routers.$TRAEFIK_ROUTER.service=$TRAEFIK_ROUTER \
    -l traefik.http.routers.$TRAEFIK_ROUTER.tls=true \
    --env KeycloakPasswordUser=$KEYCLOAK_PWD \
    --env WebsiteUri=$URI \
    --env IsSso=1 \
    --env ParkingContextConnectionString=$CONNEXION_STRING 
    --network=$DOCKER_NETWORK \
    --mount type=volume,src=$DOCKER_VOLUME_APP,dst=/app \
    --name $DOCKER_CONTAINER_NAME_APP $DOCKER_IMAGE_APP "

