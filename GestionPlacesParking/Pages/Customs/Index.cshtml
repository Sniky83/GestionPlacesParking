@page "/Index"
@using GestionPlacesParking.Core.Global.Consts
@using GestionPlacesParking.Core.Global.EnvironmentVariables.Envs
@using GestionPlacesParking.Web.UI.CustomMethods
@model GestionPlacesParking.Web.UI.Pages.Customs.IndexModel
@inject LinkGenerator linkGenerator
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    Layout = CorrectLayoutCustomMethod.GetCorrectLayout(HttpContext);

    int? isAdmin = HttpContext.Session.GetInt32(SessionConst.IsAdmin);
    dynamic userId;

    if(IsSsoEnv.IsSso)
    {
        userId = HttpContext.Session.GetString(SessionConst.UserId);
    }
    else
    {
        userId = HttpContext.Session.GetInt32(SessionConst.UserId);
    }

    string? fullName = HttpContext.Session.GetString(SessionConst.FullName);

    int firstId = Model.ParkingSlotList.First().Id;
    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
    bool isDayReserved = false;
}

<h1 class="display-6">Places de parking du @Model.Day.DaysOfTheWeek.Keys.First() @Model.Day.DaysOfTheWeek.Values.First() au @Model.Day.DaysOfTheWeek.Keys.ElementAt(4) @Model.Day.DaysOfTheWeek.Values.ElementAt(4)</h1>
<span class="text-dark">Attention : Réservable jusqu'à Vendredi 11h00. Après cette heure on passe aux réservations de la semaine suivante.</span>
<table class="table">
    <thead>
        <tr>
            <th></th>
            @foreach (var ParkingSlot in Model.ParkingSlotList)
            {
                <th class="justify-content-center text-center">@ParkingSlot.Label</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var DayOfTheWeek in Model.Day.DaysOfTheWeek)
        {
            @*Règle métier: Le samedi et le dimanche on ne fait pas de réservation*@
            @if (DayOfTheWeek.Key != "Samedi" && DayOfTheWeek.Key != "Dimanche")
            {
                bool isMyReservation = false;

                if(IsSsoEnv.IsSso)
                {
                    isMyReservation = Model.ReservationList.Where(
                        x => x.ReservationDate == DateTime.Parse(DayOfTheWeek.Value) &&
                        x.ProprietaireId == userId
                    ).Any();
                }
                else
                {
                    isMyReservation = Model.ReservationList.Where(
                        x => x.ReservationDate == DateTime.Parse(DayOfTheWeek.Value) &&
                        x.UserId == userId
                    ).Any();
                }

                isDayReserved = (isMyReservation) ? true : isDayReserved;

                <tr>
                    <td class="col-md-1">@DayOfTheWeek.Key</td>
                    @for (int i = firstId; i < (firstId + Model.ParkingSlotList.Count); i++)
                    {
                        @*Si le jour actuel + la place de parking est = à la donnée en cours alors on affiche le nom dans la case*@
                        var findReservation = Model.ReservationList.Find(
                            x => x.ReservationDate == DateTime.Parse(DayOfTheWeek.Value) &&
                            x.ParkingSlotId == i
                        );

                        var findParkingSlot = Model.ParkingSlotList.Find(
                            x => x.Id == i
                        );

                        if (findReservation != null)
                        {
                            string style = string.Empty;
                            string owner = string.Empty;

                            if(IsSsoEnv.IsSso)
                            {
                                style = (findReservation.ProprietaireId == userId) ? "btn-orange-apside" : "btn-danger";
                                owner = (findReservation.ProprietaireId == userId || isAdmin != null) ? "openDeleteReservationModal(event)" : "";
                            }
                            else
                            {
                                style = (findReservation.UserId == userId) ? "btn-orange-apside" : "btn-danger";
                                owner = (findReservation.UserId == userId || isAdmin != null) ? "openDeleteReservationModal(event)" : "";
                            }

                            if(findParkingSlot != null)
                            {
                                string formatStringForJs = string.Empty;

                                if(IsSsoEnv.IsSso)
                                {
                                    formatStringForJs = String.Format("{0}_{1}_{2}_{3}_{4}", findReservation.ProprietaireId, findParkingSlot.Label, DayOfTheWeek.Key, DayOfTheWeek.Value, findReservation.Id);
                                }
                                else
                                {
                                    formatStringForJs = String.Format("{0}_{1}_{2}_{3}_{4}", findReservation.UserId, findParkingSlot.Label, DayOfTheWeek.Key, DayOfTheWeek.Value, findReservation.Id);
                                }

                                <td class="col-md-2 justify-content-center text-center">
                                    @*On inject l'ID de la réservation pour pouvoir ensuite la supprimer*@
                                    <button id="@formatStringForJs" class="btn @style" onClick="@owner">
                                        @findReservation.ReservingName
                                    </button>
                                </td>
                            }
                        }
                        else
                        {
                            if (findParkingSlot != null)
                            {
                                string dayAndReservationId = String.Format("{0}_{1}_{2}_{3}", findParkingSlot.Label, DayOfTheWeek.Key, DayOfTheWeek.Value, i);
                                @*On inject un ID pour le récupérer facilement dans le JS pour faire la requete de création d'une réservation*@
                                <td class="col-md-2 justify-content-center text-center">
                                    <button id="@dayAndReservationId" class="btn bg-success p-3" onClick="@(isDayReserved == false ? "openMakeReservationModal(event)" : "")"></button>
                                </td>
                            }
                        }
                    }
                </tr>
            }
            isDayReserved = false;
        }
    </tbody>
</table>
<input id="XSRF-TOKEN" type="hidden" value="@requestToken" />

<partial name="Partials/_IndexMakeReservationModal" />
<partial name="Partials/_IndexDeleteReservationModal" />

@section scripts {
    <script>
        const makeReservationModal = new bootstrap.Modal(document.getElementById('makeReservationModal'));
        const deleteReservationModal = new bootstrap.Modal(document.getElementById('deleteReservationModal'));
        let isMakeReservationModalError = false;
        let isDeleteReservationModalError = false;
        const token = document.getElementById("XSRF-TOKEN").value;
        let getIdClickedBtn = null;

        function refreshPageIfModifications() {
            let nbReservations = null;

            async function checkDifferencesReservation() {
                const url = '@linkGenerator.GetPathByPage(HttpContext, "./Services/Reservations/GetReservationsService")';

                const response = await fetch(url);
                const json = await response.json();

                //On rafraichi la page pour tous les utilisateurs s'il y a des nouvelles réservations ou des suppressions de réservations
                if ((json.nbReservations > nbReservations || json.nbReservations < nbReservations) && nbReservations !== null) {
                    //Rafraichi la page
                    location.reload();
                }
                else {
                    nbReservations = json.nbReservations;
                }
            }

            const milliseconds = 2000;
            setInterval(checkDifferencesReservation, milliseconds);
        }
        refreshPageIfModifications();

        function openMakeReservationModal(event) {
            getIdClickedBtn = event.target.attributes.id.value;
            const modalBody = document.getElementById("make-reservation-body-message");

            const currentParkingSlot = getIdClickedBtn.split('_')[0];
            const currentDay = getIdClickedBtn.split('_')[1];
            const currentDate = getIdClickedBtn.split('_')[2];

            modalBody.innerHTML = "Voulez-vous ajouter une réservation de la place <b>" + currentParkingSlot + "</b> pour le <b>" + currentDay + " " + currentDate + "</b> ?";

            makeReservationModal.show();
        }

        function openDeleteReservationModal(event) {
            getIdClickedBtn = event.target.attributes.id.value;

            const modalBody = document.getElementById("delete-body-message");
            const proprietaireIdOrUserId = getIdClickedBtn.split('_')[0];
            const currentParkingSlot = getIdClickedBtn.split('_')[1];
            const currentDay = getIdClickedBtn.split('_')[2];
            const currentDate = getIdClickedBtn.split('_')[3];

            //Si on est le propriétaire de la réservation
            if (proprietaireIdOrUserId === "@userId") {
                modalBody.innerHTML = "Voulez-vous supprimer votre réservation de la place <b>" + currentParkingSlot + "</b> du <b>" + currentDay + " " + currentDate + "</b> ?";
            }
            else {
                //Si on est Admin on peut supperviser toutes les réservations
                //L'admin aura accès a cette partie mais pas un user lambda
                modalBody.innerHTML = "Voulez-vous supprimer la réservation de <b>" + event.currentTarget.innerText + "</b> de la place <b>" + currentParkingSlot + "</b> du <b>" + currentDay + " " + currentDate + "</b> ?";
            }

            deleteReservationModal.show();
        }

        function validMakeReservationModal() {
            newReservation();
        }

        async function newReservation() {
            const url = '@linkGenerator.GetPathByPage(HttpContext, "./Services/Reservations/MakeReservationService")';

            const proprietaireIdOrUserId = '@userId' || '0';
            const reservationDateString = getIdClickedBtn.split('_')[2];
            const parkingSlotId = parseInt(getIdClickedBtn.split('_')[3]);

            const [day, month, year] = reservationDateString.split('/').map(Number);

            const reservationDate = new Date(Date.UTC(year, (month - 1), day)).toISOString();

            let bodyParams = {
                ReservationDate: reservationDate,
                ParkingSlotId: parkingSlotId
            };

            const isSso = @IsSsoEnv.IsSso.ToString().ToLower();

            if(isSso)
            {
                bodyParams["ProprietaireId"] = proprietaireIdOrUserId;
            }
            else
            {
                bodyParams["UserId"] = proprietaireIdOrUserId;
            }

            let init = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset = utf-8;',
                    'XSRF-TOKEN': token
                },
                body: JSON.stringify(bodyParams)
            };

            const response = await fetch(url, init);

            if (response.ok) {
                //Rafraichi la page
                location.reload();
            }
            else {
                isMakeReservationModalError = true;

                const data = await response.json();
                document.getElementById('make-error-span').innerHTML = data.message;
            }
        }

        function validDeleteReservationModal() {
            deleteOneReservation();
        }

        async function deleteOneReservation() {
            const url = '@linkGenerator.GetPathByPage(HttpContext, "./Services/Reservations/DeleteReservationService")';

            const reservationId = parseInt(getIdClickedBtn.split('_')[4]);

            const bodyParams = {
                ReservationId: reservationId
            };

            let init = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'XSRF-TOKEN': token
                },
                body: JSON.stringify(bodyParams)
            };

            const response = await fetch(url, init);

            if (response.ok) {
                //Rafraichi la page
                location.reload();
            }
            else {
                isDeleteReservationModalError = true;

                const data = await response.json();
                document.getElementById('delete-error-span').innerHTML = data.message;
            }
        }

        makeReservationModal._element.addEventListener('hidden.bs.modal', function (event) {
            if (isMakeReservationModalError) {
                location.reload();
                isMakeReservationModalError = false;
            }
        });

        deleteReservationModal._element.addEventListener('hidden.bs.modal', function (event) {
            if (isDeleteReservationModalError) {
                location.reload();
                isDeleteReservationModalError = false;
            }
        });
    </script>
}